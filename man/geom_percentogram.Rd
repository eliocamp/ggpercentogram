% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-percentogram.R, R/stat-quantile-bin.R
\docType{data}
\name{geom_percentogram}
\alias{geom_percentogram}
\alias{StatQuantileBin}
\title{Equal probability histogram}
\format{
An object of class \code{StatQuantileBin} (inherits from \code{StatBin}, \code{Stat}, \code{ggproto}, \code{gg}) of length 3.
}
\usage{
geom_percentogram(
  mapping = NULL,
  data = NULL,
  stat = StatQuantileBin,
  position = "stack",
  ...,
  binwidth = NULL,
  bins = NULL,
  breaks = NULL,
  trim = 0,
  type = 7,
  jitter_duplicates = FALSE,
  na.rm = FALSE,
  orientation = NA,
  show.legend = NA,
  inherit.aes = TRUE
)

StatQuantileBin
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer,
either as a ggproto Geom subclass or as a string naming the stat stripped of
the stat_ prefix (e.g. "count" rather than "stat_count").}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{binwidth}{The width of the bins expressed in the percentage of data
hold in each bin.}

\item{bins}{Number of bins. Overridden by \code{binwidth}. Defaults to 30.}

\item{breaks}{Alternatively, you can supply a numeric vector giving the bin
boundaries in quantiles. Overrides \code{binwidth} and \code{bins}.}

\item{trim}{If breaks are expressed with \code{bins} or \code{binwidth}, the
percentogram will plot quantiles \code{seq(trim, 1 - trim, length.out = bins + 1)}
or \code{seq(trim, 1 - trim, binwidth)}, respectively. This effectively removes
\code{trim/2} percentage of the data and it's useful to plot very long-tailed distributions.}

\item{type}{Numeric indicating the quantile method to use. See \code{\link[stats:quantile]{stats::quantile()}}}

\item{jitter_duplicates}{Logical indicating whether to add random jitter to
duplicate points. The jitter is \code{1e-5} of the standard deviation of the data.
When the data has many duplicates, the computed quantiles don't actually have
the same ammount of observations.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{orientation}{The orientation of the layer. The default (\code{NA})
automatically determines the orientation from the aesthetic mapping. In the
rare event that this fails it can be given explicitly by setting \code{orientation}
to either \code{"x"} or \code{"y"}. See the \emph{Orientation} section for more detail.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\description{
A histogram in which each bin has the same number of observations and is
drawn to have an equal area.
}
\examples{
library(ggplot2)

ggplot(diamonds, aes(carat)) +
  geom_percentogram()

ggplot(diamonds, aes(carat)) +
  geom_percentogram(bins = 20)

# Each bin contains 10\% of the observations
# (this is the same as `bins = 10`)
ggplot(diamonds, aes(carat)) +
  geom_percentogram(binwidth = 0.1)

# User-defined cuantiles.
ggplot(diamonds, aes(carat)) +
  geom_percentogram(breaks = c(0, 0.1, 0.25, 0.5, 0.6, 0.8, 0.9, 0.99, 1),
                    color = "black")

# For long-tailed distributions, trim a bit off the extremes.
ggplot(diamonds, aes(carat)) +
  geom_percentogram(trim = 0.01)

# When the data has duplicates, quantiles don't actually contain equal number
# of observations.
ggplot(diamonds, aes(carat)) +
  geom_percentogram(bins = 20, aes(y = after_stat(count)))

# `jitter_duplicates` add a bit of noise to the duplicates to get
# more even counts
ggplot(diamonds, aes(carat)) +
  geom_percentogram(bins = 20, jitter_duplicates = TRUE,
                 aes(y = after_stat(count)))

ggplot(diamonds, aes(carat)) +
  geom_percentogram(jitter_duplicates = TRUE, bins = 20)

ggplot(diamonds, aes(carat)) +
  geom_percentogram(aes(fill = after_stat(cut_number(quantile, 4))),
                    jitter_duplicates = TRUE, bins = 20)


}
\keyword{datasets}
